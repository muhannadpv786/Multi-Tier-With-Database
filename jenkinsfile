pipeline {
    agent any
    
    tools {
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }
    stages {
        stage('Git Checkout') {
            steps {
               git branch: 'main', url: 'https://github.com/muhannadpv786/Multi-Tier-With-Database.git'
            }
        }
    
      stage('Compile') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Unit Test') {
            steps {
                sh 'mvn test -DskipTests=true'
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs.html .'
            }
        }
       
        stage('SonarQube Analsyis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=multitier -Dsonar.projectNmae=multitier -Dsonar.java.binaries=target"
                }
            }
        }    
        
         stage('Qulity Gate check') {
            steps {
               timeout(time: 1, unit: 'HOURS') {
                  waitForQualityGate abortPipeline: false
                 } 
            }      
        }
        
        stage('Build Application') {
            steps {
             sh 'mvn package -DskipTests=true' 
            }
        }
        
        stage('Publish Artifact') {
            steps {
              withMaven(globalMavenSettingsConfig: 'settings-maven', jdk: '', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                  sh 'mvn deploy -DskipTests=true'
               }  
            }
        }
        
         stage('Docker build') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker build -t muhannadpv/bankapp:latest ."
                    }
                }
            }
        }
        
        stage('Trivy Image Scan') {
            steps {
                sh "trivy image --format table -o fs-report.html muhannadpv/bankapp:latest"
            }
        }
        
        
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh "docker push muhannadpv/bankapp:latest"
                    }
                }
            }
        }
        
        stage(' K8 Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' muhannad-eks', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://0C5051D1F1A1C6DEF788C7899FBAB548.gr7.ap-south-1.eks.amazonaws.com') {
                  sh "kubectl apply -f ds.yml -n webapps"
                  sleep 30
                  
                  

                }
            }
        }   
            stage('Verify Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' muhannad-eks', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://0C5051D1F1A1C6DEF788C7899FBAB548.gr7.ap-south-1.eks.amazonaws.com') {
                  sh "kubectl get pods -n webapps"
                  sh "kubectl get svc -n webapps"
                  
                }
            }    
        }
            
    }     
        
 }

   
        
    
        
        
        
        
